apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def publishedGroupId = 'com.sdk.net'
def artifact_Id = 'socket'
def artifact_version = '0.0.9-SNAPSHOT'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        debug {
            java.exclude("*/BuildConfig")
        }

        release {
            java.exclude("*/BuildConfig")
        }
    }

    packageBuildConfig = false
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

uploadArchives {
//    configuration = configurations.archives
    repositories {
        mavenDeployer {
            snapshotRepository(url: "${project.ext.snapshotUrl}") {
                authentication(userName: "${project.ext.mavenName}", password: "${project.ext.mavenPass}")
            }

            repository(url: "${project.ext.mavenUrl}") {
                authentication(userName: "${project.ext.mavenName}", password: "${project.ext.mavenPass}")
            }

            pom.project {
                groupId publishedGroupId
                artifactId artifact_Id
                version artifact_version
                packaging 'aar'
                description 'socket common library'
            }
        }
    }
}

def jarPackage(buildType) {
    return tasks.create("jar${buildType.capitalize()}Package", Copy) {
        def aarFile = file(project.buildDir.path + "/outputs/aar/${project.name}-${buildType}.aar")
        def outputDir = file(project.buildDir.path + "/outputs/jar")

        from zipTree(aarFile)
        into outputDir
        include 'classes.jar'
        rename 'classes.jar', "${project.name}-${buildType}.jar"
        group = 'build'
        description = '生成jar包'
    }.dependsOn(project.getTasksByName("assemble${buildType.capitalize()}", false).first())
}

afterEvaluate {
    android {
        buildTypes.findAll().each { buildType ->
            def buildTypeName = buildType.getName()
            jarPackage(buildTypeName)
        }
    }
}
